package com.zacklukem.mcdsl

import com.zacklukem.mcdsl.commands.Bossbar
import com.zacklukem.mcdsl.util.*
import java.io.File
import java.nio.file.Path
import java.util.*
import kotlin.math.max
import kotlin.math.min

class Namespace(val parent: Datapack, val namespace: String, private val coords: Coord? = null) {
    private val functions = mutableListOf<Func>()

    fun onLoad(c: CommandBuilder.() -> Unit) {
        val f = function("load_${UUID.randomUUID()}", c)
        parent.onLoad(f)
    }

    fun onTick(c: CommandBuilder.() -> Unit) {
        val f = function("tick_${UUID.randomUUID()}", c)
        parent.onTick(f)
    }

    fun function(name: String, c: CommandBuilder.() -> Unit): Func {
        val builder = CommandBuilder(this)
        c(builder)
        val func = Func(builder.commands, name, namespace)
        functions.add(func)
        return func
    }

    fun function(c: CommandBuilder.() -> Unit): Func {
        return function(UUID.randomUUID().toString(), c)
    }

    fun varInt(name: String = UUID.randomUUID().toString()): VarInt {
        return VarInt(namespace, name)
    }

    fun bossbar(name: String = UUID.randomUUID().toString()): Bossbar {
        return Bossbar(namespace, name)
    }

    fun <T : Discriminant> varEnum(name: String = UUID.randomUUID().toString()): VarEnum<T> {
        return VarEnum(namespace, name)
    }

    fun print(dataPack: Path) {
        File("$dataPack/data/$namespace").deleteRecursively()

        File("$dataPack/data/$namespace/functions").mkdirs()

        for (func in functions) {
            val f = File("$dataPack/data/$namespace/functions/${func.name}.mcfunction")
            val s = "# GENERATED BY MCDSL\n\n" + func.commands.joinToString("\n")
            f.writeText(s)
        }
    }
}
